{"version":3,"sources":["Containers/Contact/Contact.module.css","Containers/Contact/Input/Input.js","Containers/Contact/Contact.js"],"names":["module","exports","Input","props","inputtype","TextField","options","map","option","MenuItem","key","value","label","Contact","state","contact","name","elementType","elementConfig","type","placeholder","helper","isValid","regex","street","zipCode","country","email","deliverMethod","checkHandler","event","id","contactArray","this","push","Aux","Container","className","classes","Grid","container","item","xs","md","Paper","elevation","inputs","input","defaultValue","helperText","select","onChange","e","button","Button","variant","color","isActiveButton","disabled","React","Component"],"mappings":"uHACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,OAAS,0B,iJC2BhFC,EArBD,SAAAC,GAGV,MAAuB,UAApBA,EAAMC,UACG,kBAACC,EAAA,EAAcF,GAGf,kBAACE,EAAA,EAAcF,EAEfA,EAAMG,QAAQC,KACd,SAAAC,GAAM,OAAI,kBAACC,EAAA,EAAD,CAAUC,IAAKF,EAAOG,MAAOA,MAAOH,EAAOG,OAASH,EAAOI,Y,iCCR/EC,E,4MAGFC,MAAQ,CACJC,QAAU,CACNC,KAAO,CAACC,YAAc,QAEtBC,cAAgB,CACZC,KAAO,OACPC,YAAc,YACdC,OAAS,2BAEXV,MAAQ,GACVW,SAAU,EACVC,MAAS,QAIbC,OAAS,CAACP,YAAc,QAExBC,cAAgB,CACZC,KAAO,OACPC,YAAc,cACdC,OAAS,2BAEXV,MAAQ,GACVW,SAAU,EACVC,MAAS,QAETE,QAAS,CAACR,YAAc,QAExBC,cAAgB,CACZC,KAAO,OACPC,YAAc,oBACdC,OAAS,2BAEXV,MAAQ,GACVW,SAAU,EACVC,MAAS,QAETG,QAAU,CAACT,YAAc,QAEzBC,cAAgB,CACZC,KAAO,OACPC,YAAc,eACdC,OAAS,2BAEXV,MAAQ,GACVW,SAAU,EACVC,MAAS,QAGTI,MAAQ,CAACV,YAAc,QAEvBC,cAAgB,CACZC,KAAO,OACPC,YAAc,aACdC,OAAS,2BAEXV,MAAQ,GACVW,SAAU,EACVC,MAAS,+BAEbK,cAAgB,CAACX,YAAc,SAE/BC,cAAgB,CACbZ,QAAU,CACN,CAACK,MAAQ,UAAWC,MAAQ,WAC5B,CAACD,MAAQ,WAAYC,MAAQ,aAC9BQ,YAAc,oCAEnBT,MAAQ,GACTW,SAAU,K,EAKVO,aAAe,SAACC,EAAOC,K,uDAMd,IAAD,OAGEC,EAAe,GAErB,IAAI,IAAItB,KAAOuB,KAAKnB,MAAMC,QACtBiB,EAAaE,KAAb,2BAEWD,KAAKnB,MAAMC,QAAQL,IAF9B,IAGQqB,GAAKrB,KASjB,OACI,kBAACyB,EAAA,EAAD,KAEI,kBAACC,EAAA,EAAD,CAAWC,UAAWC,IAAQvB,SAC9B,kBAACwB,EAAA,EAAD,CAAMC,WAAS,GAEf,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,IAIvB,kBAACJ,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,GACvB,kBAACC,EAAA,EAAD,CAAOC,UAAW,EAAGR,UAAWC,IAAQQ,QAKvCd,EAAazB,KACV,SAACwC,EAAMhB,GACH,OAAQ,kBAAC,EAAD,CACRzB,QAAWyC,EAAM7B,cAAcZ,QAC/ByB,GAAG,iBACHnB,MAAOmC,EAAM7B,cAAcE,YAC3B4B,aAAa,GACbC,WAAaF,EAAM7B,cAAcG,OACjC6B,OAA8B,WAAtBH,EAAM9B,YACdb,UAAW2C,EAAM9B,YACjBP,IAAKqC,EAAMhB,GACXoB,SAAU,SAACC,GAAD,OAAM,EAAKvB,aAAauB,EAAEL,EAAMhB,UAOnD,yBAAKM,UAAWC,IAAQe,QAGvB,kBAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAQvB,KAAKnB,MAAM2C,eAA6B,GAAZ,UAAiBC,SAAUzB,KAAKnB,MAAM2C,gBAAtG,aAMA,kBAAClB,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,W,GAhJjBgB,IAAMC,WA4Jb/C","file":"static/js/5.ff114658.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact\":\"Contact_contact__sMsdY\",\"inputs\":\"Contact_inputs__2sj6g\",\"button\":\"Contact_button__cqIIw\"};","import React from 'react';\r\n\r\nimport {TextField,MenuItem} from '@material-ui/core'\r\n\r\n\r\n\r\n\r\nconst Input = props => {\r\n\r\n\r\n    if(props.inputtype === 'input'){\r\n        return (<TextField {...props} />)\r\n    }\r\n    else {\r\n        return (<TextField {...props}> \r\n            {\r\n                props.options.map(\r\n                option => <MenuItem key={option.value} value={option.value} >{option.label}</MenuItem>\r\n                )\r\n            }\r\n        </TextField>)\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default Input ;","import React from 'react';\r\nimport Aux from '../../hoc/Aux';\r\n\r\nimport classes from './Contact.module.css';\r\n\r\n\r\nimport MaterialInput from './Input/Input';\r\nimport { Container, Grid, Paper,Button } from '@material-ui/core';\r\n\r\nclass Contact extends React.Component {\r\n\r\n\r\n    state = {\r\n        contact : {\r\n            name : {elementType : \"input\",\r\n\r\n            elementConfig : {\r\n                type : \"text\",\r\n                placeholder : \"Your name\",\r\n                helper : \"this isn't valid value \"\r\n            }\r\n            , value : '',\r\n            isValid : true,\r\n            regex :  /^.+$/\r\n            \r\n        },\r\n       \r\n        street : {elementType : \"input\",\r\n\r\n        elementConfig : {\r\n            type : \"text\",\r\n            placeholder : \"Your street\",\r\n            helper : \"this isn't valid value \"\r\n        }\r\n        , value : '',\r\n        isValid : true,\r\n        regex :  /^.+$/ \r\n        },\r\n        zipCode :{elementType : \"input\",\r\n\r\n        elementConfig : {\r\n            type : \"text\",\r\n            placeholder : \"Your your zipCode\",\r\n            helper : \"this isn't valid value \"\r\n        }\r\n        , value : '',\r\n        isValid : true ,\r\n        regex :  /^.+$/\r\n    },\r\n        country : {elementType : \"input\",\r\n\r\n        elementConfig : {\r\n            type : \"text\",\r\n            placeholder : \"Your country\",\r\n            helper : \"this isn't valid value \"\r\n        }\r\n        , value : '',\r\n        isValid : true ,\r\n        regex :  /^.+$/\r\n    }\r\n        ,\r\n        email : {elementType : \"input\",\r\n\r\n        elementConfig : {\r\n            type : \"text\",\r\n            placeholder : \"Your email\",\r\n            helper : \"this isn't valid value \"\r\n        }\r\n        , value : '',\r\n        isValid : true ,\r\n        regex :  /^[^@\\s]+@[^\\s@]+\\.[^@\\s]+$$/\r\n    },\r\n    deliverMethod : {elementType : \"select\",\r\n\r\n    elementConfig : {\r\n       options : [\r\n           {value : 'fastest', label : 'Fastest'},\r\n           {value : 'cheapest', label : 'Cheapest'}\r\n       ] ,placeholder : \"please select your deliverMethod\"\r\n    },\r\n     value : '',\r\n    isValid : true \r\n    }\r\n        }\r\n    }\r\n\r\n    checkHandler = (event, id) => {\r\n\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n\r\n\r\n        const contactArray = [];\r\n\r\n        for(let key in this.state.contact){\r\n            contactArray.push(\r\n                {\r\n                    ...this.state.contact[key],\r\n                    id : key\r\n                }\r\n            )\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n        return (\r\n            <Aux>\r\n\r\n                <Container className={classes.contact}>\r\n                <Grid container>\r\n\r\n                <Grid item xs={12} md={4}></Grid>\r\n\r\n              \r\n\r\n                <Grid item xs={12} md={4}> \r\n                <Paper elevation={3} className={classes.inputs}>\r\n             \r\n\r\n               \r\n               \r\n                {contactArray.map(\r\n                    (input,id) => {\r\n                        return (<MaterialInput\r\n                        options = {input.elementConfig.options}\r\n                        id=\"Standard-error\"\r\n                        label={input.elementConfig.placeholder}\r\n                        defaultValue=''\r\n                        helperText ={input.elementConfig.helper}\r\n                        select={input.elementType === 'select'}\r\n                        inputtype={input.elementType}\r\n                        key={input.id}\r\n                        onChange={(e)=> this.checkHandler(e,input.id)}\r\n\r\n                        \r\n                        />)\r\n                    }\r\n                )}\r\n\r\n               <div className={classes.button}>\r\n\r\n               \r\n                <Button variant=\"contained\" color={!this.state.isActiveButton ? \"primary\" : \"\" } disabled={this.state.isActiveButton}  >Submit</Button></div>\r\n                   \r\n                   </Paper>\r\n                </Grid>\r\n             \r\n\r\n                <Grid item xs={12} md={4}></Grid>\r\n                  </Grid>\r\n                 </Container>\r\n            </Aux>\r\n        )\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default Contact ;"],"sourceRoot":""}